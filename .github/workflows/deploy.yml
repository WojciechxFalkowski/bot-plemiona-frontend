name: Deploy Plemiona Bot Frontend to Raspberry Pi

on:
  push:
    branches:
      - main
  workflow_dispatch: # Pozwala na rÄ™czne uruchomienie

jobs:
  deploy:
    runs-on: self-hosted
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Generate .env file
        run: |
          echo "FRONTEND_IMAGE=${{ vars.FRONTEND_IMAGE }}" >> .env
          echo "VITE_PORT=${{ vars.VITE_PORT }}" >> .env
          echo "VITE_CLERK_PUBLISHABLE_KEY=${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}" >> .env
          echo "VITE_BACKEND_PLEMIONA=${{ vars.VITE_BACKEND_PLEMIONA }}" >> .env

      - name: Show generated .env (without secrets)
        run: |
          echo "Generated .env file:"
          grep -v "VITE_CLERK_PUBLISHABLE_KEY" .env || true

      - name: Docker Compose Down
        run: |
          docker compose down || true

      - name: Clean up old images (optional)
        run: |
          docker image prune -f || true

      - name: Docker Compose Build and Up
        run: |
          docker compose up -d --build --force-recreate

      - name: Wait for service to be ready
        run: |
          echo "Waiting for frontend service to start..."
          sleep 30
          
      - name: Check service status
        run: |
          docker compose ps
          docker compose logs frontend --tail=50

      - name: Health check
        run: |
          VITE_PORT=${{ vars.VITE_PORT }}
          echo "Testing frontend on port $VITE_PORT"
          curl -f http://localhost:$VITE_PORT || (echo "Health check failed" && exit 1) 